// Get url parameters
function get_url_params(conversion) {
  conversion = conversion || {};

  var tokens = location.search.slice(1).split('&');
  var params = {};

  for (var i = 0; i < tokens.length; ++i) {

    var tk = tokens[i].split('=');
    var fn = conversion[tk[0]] || function (v) { return v };

    if (tk.length === 2) {
      params[tk[0]] = fn(decodeURIComponent(tk[1]));
    }
  }

  return params;
}

// Manage errors
function manageError(err, layer) {
  if (layer && layer.get('type') === 'torque') {
    $('#not_supported_dialog').show();

    // hide all the overlays
    var overlays = this.getOverlays()

    for (var i = 0; i < overlays.length; ++i) {
      var o = overlays[i];
      o.hide && o.hide();
    }
  }
}

// Send stats
function stats() {
  var browser;
  var ua = navigator.userAgent;
  var checks = [
    ['MSIE 11.0', 'ms11'],
    ['MSIE 10.0', 'ms10'],
    ['MSIE 9.0', 'ms9'],
    ['MSIE 8.0', 'ms8'],
    ['MSIE 7.0','ms7'],
    ['Chrome', 'chr'],
    ['Firefox', 'ff'],
    ['Safari', 'ff']
  ]

  for (var i = 0; i < checks.length && !browser; ++i) {
    if (ua.indexOf(checks[i][0]) !== -1) browser = checks[i][1];
  }

  browser = browser || 'none';
  cartodb.core.Profiler.metric('cartodb-js.embed.' + browser).inc();
}

// On load...
$(function () {
  // Set visualization user url prefix
  cartodb.config.set('url_prefix', '<%= userPublicUrl %>');

  var bool_fn = function (v) { return v == 'true' };
  var is_custom_install = cdb.config.get('cartodb_com_hosted');
  var logo_fn  = function (v) { return ( !removeLogo || is_custom_install ) ? true : v == 'true' };
  var layer_fn = function (v) {
    if(!v || !v.length) {
      return null;
    }

    return _.map(v.split('|'), function (v) {
      return { visible: !!parseInt(v, 10) }
    });
  };

  var opt = get_url_params({
    'force_mobile': bool_fn,
    'search': bool_fn,
    'title': bool_fn,
    'description': bool_fn,
    'shareable': bool_fn,
    'fullscreen': bool_fn,
    'cartodb_logo': logo_fn,
    'scrollwheel': bool_fn,
    'sublayer_options': layer_fn,
    'layer_selector': bool_fn,
    'legends': bool_fn
  });

  <% if ((passwordProtected || isPrivacyPrivate) && protectedMapTokens) { %>
    opt.auth_token = [];

    <% protectedMapTokens.each(function (token) { %>
      opt.auth_token.push('<%= token %>');
    <% }); %>

    opt.https = true; // when auth_token is used tiles should be fetch using https
  <% } %>

  <% if (isDevelopment || cdb.config.get('no_cdn') === true) { %>
    opt.no_cdn = true;
  <% } %>

  <% if (hideLogo) { %>
    opt.cartodb_logo = false;
  <% } %>

  opt.mobile_layout = true;

  cartodb.config.set({
    cartodb_attributions: 'CARTO <a href="https://carto.com/attributions?utm_source=Footer_Link&utm_medium=referral&utm_campaign=Embed_v1&utm_content=Attributions&utm_term=<%= username %>" target="_blank">attribution</a>',
    cartodb_logo_link: 'https://carto.com?utm_source=Footer_Link&utm_medium=referral&utm_campaign=Embed_v1&utm_content=Logo'
  })

  var loadingTime  = cartodb.core.Profiler.metric('cartodb-js.embed.time_full_loaded').start();
  var visReadyTime = cartodb.core.Profiler.metric('cartodb-js.embed.time_vis_loaded').start();
  cartodb.createVis('map', '/api/v2/viz/<%= vizId %>/viz.json', opt, function (vis) {
    visReadyTime.end();
    vis.on('load', function () {
      loadingTime.end();
    });

    var like = new cdb.open.LikeView({
      el: $('.js-like'),
      auto_fetch: false,
      model: cdb.open.Like.newByVisData({
        url: '<%= visualizationsAddLikeUrl %>',
        vis_id: '<%= vizId %>',
        likes: <%= vizLikes %>
      })
    });

    window.vis = vis;

    // fixes default position of the overlays
    setTimeout(function () {
      $(window).trigger('map_resized');
    }, 400);
    // some stats
    stats();
  }).on('error', manageError);
});

//<!-- load stats -->
<% if (cdb.config.get('graphite_public')) { %>
  if (location.protocol.indexOf('https') === -1) {
    jQuery.getScript('<%= assetsUrl %>/statsc.js', function (ready) {
      statsc.connect('http://<%= cdb.config.get('graphite_public')['host'] %>:<%= cdb.config.get('graphite_public')['port'] %>/');
      cartodb.core.Profiler.backend(function () {
        statsc.send.apply(statsc, arguments);
      });
      // stop sending stats after 11 seconds
      // statsc send stats in 5 secs interval so allow to send at least twice
      setTimeout(function () {
        cartodb.core.Profiler.backend(null);
      }, 11 * 1000);
    })
  }
<% } %>
