var Backbone = require('backbone');
var _ = require('underscore');
var ConfigModel = require('../../../../javascripts/cartodb3/data/config-model');
var LayerDefinitionsCollection = require('../../../../javascripts/cartodb3/data/layer-definitions-collection');
var LayerDefinitionModel = require('../../../../javascripts/cartodb3/data/layer-definition-model');
var AnalysisDefinitionNodesCollection = require('../../../../javascripts/cartodb3/data/analysis-definition-nodes-collection');

describe('cartodb3/data/layer-definition-model', function () {
  beforeEach(function () {
    this.configModel = new ConfigModel({
      base_url: '/u/pepe'
    });

    this.analysisDefinitionNodesCollection = new AnalysisDefinitionNodesCollection(null, {
      configModel: this.configModel
    });

    this.collection = new LayerDefinitionsCollection(null, {
      configModel: this.configModel,
      analysisDefinitionNodesCollection: this.analysisDefinitionNodesCollection,
      mapId: 'm123'
    });
    this.model = new LayerDefinitionModel({
      id: 'abc-123',
      kind: 'carto',
      options: {
        type: 'CartoDB',
        color: '#FABADA',
        table_name: 'foo',
        query: 'SELECT * FROM foo',
        tile_style: 'asdasd',
        visible: true
      }
    }, {
      parse: true,
      configModel: this.configModel,
      collection: this.collection
    });
  });

  it('should transform some attrs to be compatible with cartodb.js', function () {
    expect(this.model.get('cartocss')).toEqual('asdasd');
    expect(this.model.get('tile_style')).toBeUndefined();

    expect(this.model.get('sql')).toContain('SELECT');
    expect(this.model.get('query')).toBeUndefined();
  });

  describe('.toJSON', function () {
    it('should return the original data', function () {
      expect(this.model.toJSON()).toEqual({
        id: 'abc-123',
        kind: 'carto',
        options: {
          type: 'CartoDB',
          visible: true,
          color: '#FABADA',
          table_name: 'foo',
          query: 'SELECT * FROM foo',
          tile_style: 'asdasd',
          style_properties: jasmine.any(Object),
          cartocss_history: jasmine.any(Array),
          sql_history: jasmine.any(Array)
        }
      });
    });
  });

  describe('styleModel', function () {
    it('should create style model if table name attribute exists', function () {
      expect(this.model.styleModel).toBeDefined();
    });

    it('should not add style model if table name doesn\'t exist', function () {
      var mdl = new LayerDefinitionModel({
        id: 'other',
        options: {
          type: 'tiled',
          tile_style: 'asdasd'
        }
      }, {
        parse: true,
        configModel: this.configModel
      });

      expect(mdl.styleModel).toBeUndefined();
    });

    describe('.toJSON', function () {
      it('should provide style model definition', function () {
        spyOn(this.model.styleModel, 'isAutogenerated').and.returnValue(false);
        var data = this.model.toJSON();
        expect(data.options.style_properties).toBeDefined();
      });

      it('should not provide style definition if autogenerated option is true', function () {
        spyOn(this.model.styleModel, 'isAutogenerated').and.returnValue(true);
        var data = this.model.toJSON();
        expect(data.options.style_properties).not.toBeDefined();
      });
    });
  });

  describe('.isOwnerOfAnalysisNode', function () {
    beforeEach(function () {
      this.nodeModel = this.analysisDefinitionNodesCollection.add({
        id: 'b3',
        type: 'source',
        params: {
          query: 'SELECT * FROM somewhere'
        }
      });
    });

    it('should return true if given layer definition model is considered owning it', function () {
      expect(this.model.isOwnerOfAnalysisNode(this.nodeModel)).toBe(false);
      this.model.set('letter', 'b');
      expect(this.model.isOwnerOfAnalysisNode(this.nodeModel)).toBe(true);
    });
  });

  describe('for a layer with an analysis source', function () {
    beforeEach(function () {
      this.model = new LayerDefinitionModel({
        id: 'abc-123',
        kind: 'carto',
        options: {
          type: 'CartoDB',
          color: '#FABADA',
          table_name: 'foo_table',
          source: 'a1'
        }
      }, {
        parse: true,
        configModel: this.configModel
      });
    });

    it('should have a source set', function () {
      expect(this.model.get('source')).toEqual('a1');
    });

    describe('.toJSON', function () {
      it('should return the original data', function () {
        expect(this.model.toJSON()).toEqual({
          id: 'abc-123',
          kind: 'carto',
          options: {
            type: 'CartoDB',
            color: '#FABADA',
            table_name: 'foo_table',
            source: 'a1',
            style_properties: jasmine.any(Object),
            cartocss_history: jasmine.any(Array),
            sql_history: jasmine.any(Array)
          }
        });
      });
    });
  });

  describe('for a layer with an infowindow', function () {
    beforeEach(function () {
      this.configModel = new ConfigModel({
        base_url: '/u/pepe'
      });

      this.model = new LayerDefinitionModel({
        id: 'abc-123',
        kind: 'carto',
        options: {
          type: 'CartoDB',
          color: '#FABADA',
          table_name: 'foo_table',
          source: 'a1',
          style_properties: jasmine.any(Object),
          cartocss_history: jasmine.any(Array),
          sql_history: jasmine.any(Array)
        },
        infowindow: {
          template_name: 'infowindow_light',
          latlng: [0, 0],
          offset: [28, 0],
          maxHeight: 180,
          autoPan: true,
          template: '',
          content: '',
          visibility: false,
          alternative_names: {},
          fields: [
            {
              name: 'description',
              title: true,
              position: 0
            },
            {
              name: 'name',
              title: true,
              position: 1
            }
          ],
          width: 226,
          headerColor: {
            color: { fixed: '#35AAE5;', opacity: 1 }
          }
        }
      }, {
        parse: true,
        configModel: this.configModel
      });
      this.infowindowModel = this.model.infowindowModel;
    });

    it('should have an infowindow model', function () {
      expect(this.infowindowModel).toBeDefined();
      expect(this.infowindowModel.get('fields').length).toEqual(2);
    });

    describe('infowindow/tooltip reset', function () {
      beforeEach(function () {
        this.model.tooltipModel = new Backbone.Model();
        this.model.tooltipModel.unsetTemplate = function () {};
        this.model.infowindowModel = new Backbone.Model();
        this.model.infowindowModel.unsetTemplate = function () {};

        spyOn(this.model.tooltipModel, 'unsetTemplate');
        spyOn(this.model.infowindowModel, 'unsetTemplate');
        this.styleModel = this.model.styleModel;
      });

      it('should reset infowindow/tooltip template and fields if style model type is aggregated', function () {
        this.styleModel.set('type', 'heatmap');
        expect(this.model.infowindowModel.unsetTemplate).not.toHaveBeenCalled();
        expect(this.model.tooltipModel.unsetTemplate).not.toHaveBeenCalled();
        this.styleModel.set('type', 'squares');
        expect(this.model.infowindowModel.unsetTemplate).toHaveBeenCalled();
        expect(this.model.tooltipModel.unsetTemplate).toHaveBeenCalled();
      });

      it('should reset infowindow/tooltip template and fields if style model has animated enabled', function () {
        var animatedAttrs = _.clone(this.styleModel.get('animated'));
        animatedAttrs.enabled = false;
        this.styleModel.set('animated', animatedAttrs);
        expect(this.model.infowindowModel.unsetTemplate).not.toHaveBeenCalled();
        expect(this.model.tooltipModel.unsetTemplate).not.toHaveBeenCalled();
        animatedAttrs = _.clone(this.styleModel.get('animated'));
        animatedAttrs.enabled = true;
        this.styleModel.set('animated', animatedAttrs);
        expect(this.model.infowindowModel.unsetTemplate).toHaveBeenCalled();
        expect(this.model.tooltipModel.unsetTemplate).toHaveBeenCalled();
      });
    });

    it('should not save the model if infowindow changes', function () {
      spyOn(this.model, 'save');
      this.infowindowModel.set('template_name', 'infowindow_dark');
      expect(this.model.save).not.toHaveBeenCalled();
    });

    describe('.toJSON', function () {
      it('should modify infowindow attribute', function () {
        this.infowindowModel.setTemplate('testing');
        var data = this.model.toJSON();
        expect(data.infowindow.template_name).toEqual('testing');
      });

      it('should return the original data', function () {
        expect(this.model.toJSON()).toEqual({
          id: 'abc-123',
          kind: 'carto',
          options: {
            type: 'CartoDB',
            color: '#FABADA',
            table_name: 'foo_table',
            source: 'a1',
            style_properties: jasmine.any(Object),
            cartocss_history: jasmine.any(Array),
            sql_history: jasmine.any(Array)
          },
          infowindow: {
            template_name: 'infowindow_light',
            latlng: [0, 0],
            offset: [28, 0],
            maxHeight: 180,
            autoPan: true,
            template: '',
            content: '',
            visibility: false,
            alternative_names: {},
            fields: [
              {
                name: 'description',
                title: true,
                position: 0
              },
              {
                name: 'name',
                title: true,
                position: 1
              }
            ],
            width: 226,
            headerColor: {
              color: { fixed: '#35AAE5;', opacity: 1 }
            }
          }
        });
      });

      it('should not provide infowindow data if model is empty', function () {
        this.infowindowModel.clear();

        expect(this.model.toJSON()).toEqual({
          id: 'abc-123',
          kind: 'carto',
          options: {
            type: 'CartoDB',
            color: '#FABADA',
            table_name: 'foo_table',
            source: 'a1',
            style_properties: jasmine.any(Object),
            cartocss_history: jasmine.any(Array),
            sql_history: jasmine.any(Array)
          }
        });
      });
    });
  });

  describe('.getAnalysisDefinitionNodeModel', function () {
    beforeEach(function () {
      this.a1 = {};
      spyOn(this.model, 'findAnalysisDefinitionNodeModel').and.returnValue(this.a1);
      this.model.set('source', 'a1');
      this.model.getAnalysisDefinitionNodeModel();
    });

    it('should return the current analysis model of layer', function () {
      expect(this.model.findAnalysisDefinitionNodeModel).toHaveBeenCalledWith('a1');
      expect(this.model.getAnalysisDefinitionNodeModel()).toBe(this.a1);
    });
  });

  describe('.findAnalysisDefinitionNodeModel', function () {
    beforeEach(function () {
      this.b1 = {id: 'b1'};
      spyOn(this.collection, 'findAnalysisDefinitionNodeModel');
      this.model.findAnalysisDefinitionNodeModel('b1');
    });

    it('should return the node for given id', function () {
      this.collection.findAnalysisDefinitionNodeModel.and.returnValue(this.b1);
      expect(this.model.findAnalysisDefinitionNodeModel('b1')).toBe(this.b1);
    });

    it('should return nothing given an id of a non-existing node', function () {
      expect(this.model.findAnalysisDefinitionNodeModel('x1')).toBeUndefined();
    });
  });

  describe('.toggleVisible', function () {
    it('should toggle the visible attr', function () {
      this.model.toggleVisible();
      expect(this.model.get('visible')).toBe(false);

      this.model.toggleVisible();
      expect(this.model.get('visible')).toBe(true);

      this.model.toggleVisible();
      expect(this.model.get('visible')).toBe(false);
    });
  });

  describe('.getNumberOfAnalyses', function () {
    beforeEach(function () {
      this.model.set('letter', 'a');
    });

    it("should return 0 if layer doesn't have a source node", function () {
      expect(this.model.getNumberOfAnalyses()).toEqual(0);
    });

    it('should return the number of analyses owned by the layer', function () {
      this.analysisDefinitionNodesCollection.add([{
        id: 'a0',
        type: 'source',
        params: {
          query: 'SELECT * FROM foo'
        }
      }, {
        id: 'a1',
        type: 'buffer',
        radio: 300,
        distance: 'meters',
        source: 'a0'
      }, {
        id: 'a2',
        type: 'buffer',
        radio: 600,
        distance: 'meters',
        source: 'a1'
      }, {
        id: 'b0',
        type: 'source',
        params: {
          query: 'SELECT * FROM bar'
        }
      }, {
        id: 'b1',
        type: 'buffer',
        radio: 300,
        distance: 'meters',
        source: 'b0'
      }]);

      this.model.set('source', 'a2');

      expect(this.model.getNumberOfAnalyses()).toEqual(3);
    });
  });

  describe('.containsNode', function () {
    beforeEach(function () {
      this.analysisDefinitionNodesCollection.add([{
        id: 'a0',
        type: 'source',
        params: {
          query: 'SELECT * FROM foo'
        }
      }, {
        id: 'a1',
        type: 'buffer',
        radio: 300,
        distance: 'meters',
        source: 'a0'
      }, {
        id: 'b1',
        type: 'buffer',
        radio: 300,
        distance: 'meters',
        source: 'a0'
      }]);
      this.model.set('source', 'a1');
    });

    it('should return true if layer contains given node', function () {
      expect(this.model.containsNode(this.analysisDefinitionNodesCollection.get('a1'))).toBe(true);
      expect(this.model.containsNode(this.analysisDefinitionNodesCollection.get('a0'))).toBe(true);

      expect(this.model.containsNode(this.analysisDefinitionNodesCollection.get('b1'))).toBe(false);
      expect(this.model.containsNode(false)).toBe(false);
    });
  });

  describe('.canBeDeletedByUser', function () {
    it('should return true as long as it is not the only data layer and not all the other layers depend on it', function () {
      expect(this.model.canBeDeletedByUser()).toBe(false);

      spyOn(this.collection, 'getNumberOfDataLayers').and.returnValue(3);
      expect(this.model.canBeDeletedByUser()).toBe(true);
    });
  });
});
